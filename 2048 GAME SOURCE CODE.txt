//Header files:
#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <time.h>
#include <string.h>
//creating global variables to be used throughout the program
int i,j,k,lx,y,score;
//Structure definition for storing the score and player's details
struct details
{
	char name[30];
	int age;
	char level[30];
	int score;
	int max_tile;
}game;
//structure variable name : game
//prototype of main function
void main();
//The role of each function has been described in detail in the word document
int randomno(int size)
{
	return rand()%size;
}
int randomvalue()
{
	return rand()%10?2:4;
}
void gotoxy(int x,int y)
{
	COORD pos={x,y};
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE),pos);
}
void display(int size, int tile[][size],int *ptrscore)
{
	system("CLS");
	gotoxy(50+(2*size),2);
	printf("2048  GAME\n");
	gotoxy(70+(2*size),3);
	printf("SCORE : %d\n",*ptrscore);
	gotoxy(50,4);
	for(i=0;i<(size*5)+2;i++)
	printf("*");
	printf("\n");
for(i=0;i<size;i++)
{
	gotoxy(50,5+i);
	for(j=0;j<size;j++)
	{
		
		if(j==0)
		printf("%c",219);
		if(tile[i][j]==0)
		printf("%4s "," ");
		else
		printf("%4d ",tile[i][j]);
		if(j==size-1)
		printf("%c",219);
	}
	printf("\n");
}
	gotoxy(50,5+i);
	for(i=0;i<(size*5)+2;i++)
		printf("*");
	printf("\n");	
}
int CheckEmpty(int size, int tile[][size])
{
	int flag=0;
	for(i=0;i<size;i++)
{
	for(j=0;j<size;j++)
	{
		if(tile[i][j]==0)
			flag++;
		else if(tile[i][j]==2048)
		{
			flag=-1;
			goto endloop;
		}
	}
} 
	endloop:
		return (flag>=1)?1:flag;
/* -1:won 0:end game(lost) flag>=1:continue*/ 		
}
void Addno(int size, int tile[][size])
{
	if(CheckEmpty(size,tile))
	{
		int x,y;
		label:
	x=randomno(size);
	y=randomno(size);
	if(tile[x][y]==0)
		tile[x][y]=randomvalue();
	else
		goto label;
	}
}

void UP(int size, int tile[][size], int *ptrscore)
{
	int a[size][size];
	memcpy(a,tile,size*size*sizeof(int));
	int c=0;
	for(j=0;j<size;j++)
	{
		int flag=0;
		for(i=0;i<size-1&&flag<size;i++)
		{
			if(a[i][j]==0)
			{
				for(k=i;k<size-1;k++)
					a[k][j]=a[k+1][j];
				a[k][j]=0;
				i--;
				flag++;
			}	
			else if(a[i+1][j]==0)
			{
				a[i+1][j]=a[i][j];
				a[i][j]=0;
				i--;
			}
			else if(a[i][j]==a[i+1][j])
			{
				*ptrscore +=(2*a[i][j]);
				a[i][j]*=2;
				a[i+1][j]=0;
				c=1;
			}
		}
	}
	if(memcmp(a,tile,size*size*sizeof(int))!=0)	
	{
		memcpy(tile,a,size*size*sizeof(int));
		Addno(size,tile);	
	}
	else
		memcpy(tile,a,size*size*sizeof(int));
}
void LEFT(int size, int tile[][size],int *ptrscore)
{
	int a[size][size];
	memcpy(a,tile,size*size*sizeof(int));
	int c=0;
	for(i=0;i<size;i++)
	{
		int flag=0;
		for(j=0;j<size-1&&flag<size;j++)
		{
			if(a[i][j]==0)
			{
				for(k=j;k<size-1;k++)
					a[i][k]=a[i][k+1];
				a[i][k]=0;
				j--;
				flag++;
			}	
			else if(a[i][j+1]==0)
			{
				a[i][j+1]=a[i][j];
				a[i][j]=0;
				j--;
			}
			else if(a[i][j]==a[i][j+1])
			{
				*ptrscore +=(2*a[i][j]);
				a[i][j]*=2;
				a[i][j+1]=0;
				c=1;
			}
		}
	}
	if(memcmp(a,tile,size*size*sizeof(int))!=0)	
	{
		memcpy(tile,a,size*size*sizeof(int));
		Addno(size,tile);	
	}
	else
		memcpy(tile,a,size*size*sizeof(int));
}
void reverse_tile(char s[],int size, int tile[][size])
{
	int temp;
	if(strcmp(s,"RIGHT")==0)
		for(i=0;i<size;i++)
			for(j=0;j<size/2;j++)
			{
				temp=tile[i][j];
				tile[i][j]=tile[i][size-j-1];
				tile[i][size-j-1]=temp;
			}
	else if(strcmp(s,"DOWN")==0)
		for(i=0;i<size;i++)
			for(j=0;j<size/2;j++)
			{
				temp=tile[j][i];
				tile[j][i]=tile[size-j-1][i];
				tile[size-j-1][i]=temp;
			}
}
int PlayGame(int size, int tile[][size],int *ptrscore)
{
	continue_game:
	gotoxy(40+size,8+size);
	printf("Use the Arrow keys to play the Game!!\n");
	gotoxy(40+size,10+size);
	printf("YOU WIN WHEN A 2048 TILE IS CREATED.");
	gotoxy(40+size,12+size);
	printf("YOU LOSE WHEN THE BOARD IS FILLED UP.");
	gotoxy(40+size,14+size);
	printf("ENTER x TO GO BACK TO THE MAIN MENU..");	
	int ch;
	ch=getch();
	if(ch=='x')
	{
		printf("\n\n\t**** Do you want to go back to the main menu? Your game will not be saved!! ****\n\t\t(y/n) : ");
		char a=getch();
		if(a=='y')
			main();
		else 
			goto continue_game;
	}
	else if(ch==0||ch==224)
	switch(getch())
	{
		case 72:
			//code for up arrow
			UP(size,tile,ptrscore);
			display(size,tile,ptrscore);
			if(CheckEmpty(size,tile)==-1)
			return -1;
			else if(CheckEmpty(size,tile)==0)
			return 0;
			else
			goto continue_game;
			break;
		case 80:
			//code for Down arrow
			reverse_tile("DOWN",size,tile);
			UP(size,tile,ptrscore);
			reverse_tile("DOWN",size,tile);
			display(size,tile,ptrscore);
			if(CheckEmpty(size,tile)==-1)
			return -1;
			else if(CheckEmpty(size,tile)==0)
			return 0;
			else
			goto continue_game;
			break;
		case 75:
			//code for LEFT arrow
			LEFT(size,tile,ptrscore);
			display(size,tile,ptrscore);
			if(CheckEmpty(size,tile)==-1)
			return -1;
			else if(CheckEmpty(size,tile)==0)
			return 0;
			else
			goto continue_game;
			break;
		case 77:
			//code for right arrow
			reverse_tile("RIGHT",size,tile);
			LEFT(size,tile,ptrscore);
			reverse_tile("RIGHT",size,tile);
			display(size,tile,ptrscore);
			if(CheckEmpty(size,tile)==-1)
			return -1;
			else if(CheckEmpty(size,tile)==0)
			return 0;
			else
			goto continue_game;
			break;
		default:
			printf("Enter a valid key..\n !!!USE ONLY ARROW KEYS TO PLAY THE GAME!!!");
			goto continue_game;
	}
	else
	{
		printf("\n\n\t\t#### Do not recognize this movement!! Please try again using the arrow keys. ####");
		goto continue_game;
	}
}
void displaySCORE()
{
	system("CLS");
	gotoxy(16,4);
	printf("***********************************LEADER BOARD**********************************\n\n");
	FILE *fp;
    char data[100];
    fp = fopen("LeaderBoard.txt", "r");
    while(fgets(data,100,(FILE*)fp)!=NULL)
    	printf("\t\t%s\n",data);
    fclose(fp);
    printf("\n\n\t~*~Press any key to go back to the main menu~*~ ");
    char c=getch();
    main();
}
void Instructions()
{
	system("CLS");
	gotoxy(40,5);
	printf("*****~  HOW TO PLAY 2048 GAME  ~*****");
	gotoxy(25,8);
	printf("--> 2048 is played on a gray N X N grid, with numbered tiles that slide smoothly when a player moves them using the four arrow keys.");
	gotoxy(25,10);
	printf("--> Every turn, a new tile will randomly appear in an empty spot on the board with a value of either 2 or 4.");
	gotoxy(25,12);
	printf("-->  Tiles slide as far as possible in the chosen direction until they are stopped by either another tile or the edge of the grid. ");
	gotoxy(25,14);
	printf("-->  If two tiles of the same number collide while moving, they will merge into a tile with the total value of the two tiles that collided.");
	gotoxy(25,16);
	printf("--> The resulting tile cannot merge with another tile again in the same move. ");
	gotoxy(25,18);
	printf("--> A scoreboard on the upper-right keeps track of the user's score.");
	gotoxy(25,20);
	printf("--> The user's score starts at zero, and is increased whenever two tiles combine, by the value of the new tile.");
	gotoxy(25,22);
	printf("--> The game is won when a tile with a value of 2048 appears on the board");
	gotoxy(25,24);
	printf("--> When the player has no legal moves (there are no empty spaces and no adjacent tiles with the same value), the game ends.");
	gotoxy(20,30);
	printf("Go ahead and play the game.. Press any key to continue : ");
	char u=getch();
	main();
	
}

//THE MAIN FUNCTION...
void main()
{
	system("CLS");
	int choice,s;
	score=0;
	int *ptrscore=&score;
	choose:
		gotoxy(5,2);
		printf("************************************************\n");
	for(i=1;i<13;i++)
	{
		gotoxy(5,2+i);
		printf("%c",219);
		gotoxy(52,2+i);
		printf("%c",219);		
	}
	gotoxy(20,3);
	printf("CHOOSE THE GAME LEVEL : \n\n \t 1. Small : 3 X 3\n \t 2. Classic : 4 X 4\n \t 3. Big : 5 X 5 \n \t 4. Bigger : 6 X 6\n \t 5. Huge : 8 X 8\n\t**************************\n \t 6.HOW TO PLAY\n \t 7.VIEW LEADERBOARD\n \t 8.EXIT GAME\n\n");
	gotoxy(5,14);
	printf("************************************************\n\n");
	printf(" \t\tEnter 1,2,3,4,5,6 or 7 : ");
	scanf("%d",&choice);
	switch(choice)
	{
		case 1:
			s=3;
			strcpy(game.level,"Small   : 3 X 3");
			break;
		case 2:
			s=4;
			strcpy(game.level,"Classic : 4 X 4");
			break;
		case 3:
			s=5;
			strcpy(game.level,"Big     : 5 X 5");
			break;
		case 4:
			s=6;
			strcpy(game.level,"Bigger  : 6 X 6");
			break;
		case 5:
			s=8;
			strcpy(game.level,"Huge    : 8 X 8");
			break;
		case 6:
			Instructions();
			break;
		case 7:
			displaySCORE();
			break;
		case 8:
			exit(0);
			break;
		default:
			printf("INVALID OPTION!! PLEASE CHOOSE AGAIN.\n");
			goto choose;
	}
	const int size=s;
	int tile[size][size];
	for(i=0;i<size;i++)
		for(j=0;j<size;j++)
			tile[i][j]=0;
	srand(time(0));
	Addno(size,tile);
	Addno(size,tile);
	display(size,tile,ptrscore);
	int x,flag;
	continueplay:
	x=PlayGame(size,tile,ptrscore);
	if(x==-1)
		printf("CONGRATS!!! You have reached 2048.. \nYOU WON THE GAME.\n");
	else if(x==0)
	{
		flag=0;
		for(i=0;i<size-1;i++)
		{
			for(j=0;j<size-1;j++)
			{
				if(tile[i][j]==tile[i+1][j]||tile[i][j]==tile[i][j+1])
				flag++;
			}
		}
		for(i=0;i<size-1;i++)
			if(tile[i][size-1]==tile[i+1][size-1])
				flag++;
		for(j=0;j<size-1;j++)
			if(tile[size-1][j]==tile[size-1][j+1])
				flag++;
		if(flag>0)
		goto continueplay;
		else
			printf("GAME OVER!!! \nBetter luck next time. \n");
	}
	int max=0;
	for(i=0;i<size;i++)
		for(j=0;j<size;j++)
			if(max<tile[i][j])
				max=tile[i][j];
	FILE *fp;
    fp=fopen("LeaderBoard.txt","a");
      printf("\nEnter Your Name : ");
      scanf("%s",game.name);
      printf("Enter Your Age : ");
      scanf("%d",&game.age);
      game.score=*ptrscore;
      game.max_tile=max;
      fprintf(fp,"\n%-20s\t%d\t%s\t\t%d\t\t%d",game.name,game.age,game.level,game.score,game.max_tile);
      printf("\nYour Score is saved in the leaderboard. \nGo back to Home page to view your Leaderboard.\n");
      fclose(fp);
	printf(" PRESS y TO PLAY AGAIN.\n IF YOU WANT TO EXIT, Press n : ");
	char c;
	c=getch();
	if(c=='n')
	exit(0);
	else if(c=='y')
	main();	
}